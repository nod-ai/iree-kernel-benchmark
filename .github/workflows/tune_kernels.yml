name: Tune Wave Kernels

on:
  workflow_dispatch:
    inputs:
      config_url:
        description: "URL to tuning configuration"
        required: false
      config_json:
        description: "Stringified JSON for tuning configuration"
        required: false
        default: "[]"
      num_trials:
        description: "Number of trials per kernel for tuning"
        required: false
        default: "100"
      iterations:
        description: "Number of benchmark iterations per trial"
        required: false
        default: "5"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  tuning:
    runs-on: linux-mi325-1gpu-ossci-nod-ai

    env:
      CONFIG_JSON: ${{ inputs.config_json }}

    concurrency:
      group: benchmarking
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55
        with:
          python-version: "3.12"

      - name: Install rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

      - name: Setup venv
        run: |
          python3 -m venv tune_venv
          source tune_venv/bin/activate
          pip install --upgrade pip
          pip install --pre --no-cache-dir --find-links https://iree.dev/pip-release-links.html iree-base-compiler iree-base-runtime --upgrade
          pip install -r pytorch-rocm-requirements.txt
          pip install -r requirements.txt
          pip install wave-lang

      - name: Load Tuning Configuration from URL
        if: ${{ inputs.config_url }}
        run: |
          curl -o tune_config.json ${{ inputs.config_url }}

      - name: Load Tuning Configuration from JSON string
        if: ${{ !inputs.config_url }}
        run: |
          echo "$CONFIG_JSON" > tune_config.json

      - name: Run Tuning
        if: contains(env.CONFIG_JSON, 'attention')
        run: |
          source tune_venv/bin/activate
          python -m json.tool tune_config.json > /dev/null || { echo "Error: Invalid JSON format"; exit 1; }
          python -m tune --config=tune_config.json
